"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Router = void 0;

var _app = _interopRequireDefault(require("./app"));

var _component = require("./component");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let instance;

class Router {
  constructor() {
    this.config = {
      routes: []
    };
    this.routerOutlet = document.querySelector('router-outlet');

    if (!this.routerOutlet) {
      throw new Error('Missing Router Outlet');
    } // Store the initial content so we can revisit it later


    history.replaceState({
      url: document.location.pathname
    }, document.title, document.location.href); // Revert to a previously saved state

    window.addEventListener('popstate', event => {
      console.log('popstate fired!');
      this.run(event.state.url);
    });
  }

  addRoute(route) {
    const params = Array.from(route.path.matchAll(/:(\w*)/g)).map(param => param[1]);
    route.path = new RegExp(`^${route.path.replace(/\//g, '\\/').replace(/:(\w*)/g, '(\\w*)')}$`);
    route.params = params;
    this.config.routes.push(route);
  }
  /**
   *
   * @param {array} routes
   */


  addRoutes(routes) {
    this.config.routes = [...this.config.routes, ...routes.map(route => {
      const params = Array.from(route.path.matchAll(/:(\w*)/g)).map(param => param[1]);
      route.path = new RegExp(`^${route.path.replace(/\//g, '\\/').replace(/:(\w*)/g, '(\\w*)')}$`);
      route.params = params;
      return route;
    })];
    return this;
  }

  navigate(url, title = '', data = {}) {
    data.url = url;
    history.pushState(data, title, document.location.origin + url);
    this.run(url);
  }

  async run(url) {
    url = url || document.location.pathname;
    const {
      component,
      params
    } = this.getRoutes(url);

    if (component !== undefined) {
      // Component.define(component, this.routerOutlet, params)
      const module = _app.default.components.find(item => {
        return item.constructor.name === component;
      });

      _component.Component.define(module, this.routerOutlet, params);
    }
  }
  /**
   *
   * @param {object} config
   */


  static getInstance() {
    if (instance === undefined) {
      instance = new Router();
    }

    return instance;
  }

  getRoutes(path) {
    for (const route of this.config.routes) {
      let match = path.match(route.path);

      if (match !== null) {
        match = match.slice(1);
        return {
          component: route.component,
          params: match.reduce((params, value, index) => {
            params[route.params[index]] = value;
            return params;
          }, {})
        };
      }
    }

    return {};
  }

}

exports.Router = Router;
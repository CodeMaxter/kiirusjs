// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, cache, entry, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject.parcelRequire === 'function' &&
    globalObject.parcelRequire;
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  globalObject.parcelRequire = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"21e4878fbad7078fe681d3cbaefd1bed":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = 12345;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "1b5921f9a3ad678d3bc1cc2b0c688cd8";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH */

var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept, acceptedAssets; // eslint-disable-next-line no-redeclare

var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
  var port = HMR_PORT || location.port;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    acceptedAssets = {};
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH); // Handle HMR Update

      var handled = false;
      assets.forEach(asset => {
        var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

        if (didAccept) {
          handled = true;
        }
      });

      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });

        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];

          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }

    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('ðŸš¨ [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      } // Render the fancy html overlay


      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      document.body.appendChild(overlay);
    }
  };

  ws.onerror = function (e) {
    console.error(e.message);
  };

  ws.onclose = function (e) {
    console.warn('[parcel] ðŸš¨ Connection to the HMR server was lost');
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
    console.log('[parcel] âœ¨ Error resolved');
  }
}

function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';

  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          ðŸš¨ ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }

  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    if (asset.type === 'css') {
      var newStyle = document.createElement('style');
      newStyle.innerHTML = asset.output;
      document.body.appendChild(newStyle);
    } else {
      var fn = new Function('require', 'module', 'exports', asset.output);
      modules[asset.id] = [fn, asset.depsByBundle[bundle.HMR_BUNDLE_ID]];
    }
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1]);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(global.parcelRequire, id);
      });

      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }

  acceptedAssets[id] = true;
}
},{}],"11f87267de35446dad2d4907d44f42d5":[function(require,module,exports) {
"use strict";

var _kiirusJs = _interopRequireDefault(require("./../src/kiirus-js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _kiirusJs.default)();
},{"./../src/kiirus-js":"d37822a86f14655ef6551f5086e11a17"}],"d37822a86f14655ef6551f5086e11a17":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
exports.default = void 0;

var _app = _interopRequireDefault(require("./core/app"));

var _component = require("./core/component");

Object.keys(_component).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _component[key];
    }
  });
});

var _kiirusRouter = require("./core/kiirus-router");

Object.keys(_kiirusRouter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _kiirusRouter[key];
    }
  });
});

var _routeConfig = require("./core/route-config");

Object.keys(_routeConfig).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _routeConfig[key];
    }
  });
});

var _router = require("./core/router");

Object.keys(_router).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _router[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Core System
var _default = _app.default;
exports.default = _default;
},{"./core/app":"ebb25f251f366abfd244101e66563286","./core/component":"736c9f382f72d09e2d544126fba347dd","./core/kiirus-router":"bd2a29c04597defd27267b19b5300b63","./core/route-config":"35e1a80b27bf56c49f1081cf2b74751f","./core/router":"2ae09f27ae3f184dfcc7e1e0bbc2735d"}],"ebb25f251f366abfd244101e66563286":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _kiirusRouter = _interopRequireDefault(require("./kiirus-router"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const start = () => {
  const router = document.querySelector('kiirus-router');

  if (router) {
    console.log('define router');
  }
};

var _default = start;
exports.default = _default;
},{"./kiirus-router":"bd2a29c04597defd27267b19b5300b63"}],"bd2a29c04597defd27267b19b5300b63":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KiirusRouter = void 0;

var _component = require("./component");

class KiirusRouter extends _component.Component {
  constructor(props) {
    super(props);
    console.log('KiirusRouter');
    const items = Array.from(this.querySelectorAll('route-config'));
    console.log(items);
  }

}

exports.KiirusRouter = KiirusRouter;

_component.Component.define(KiirusRouter);
},{"./component":"736c9f382f72d09e2d544126fba347dd"}],"736c9f382f72d09e2d544126fba347dd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = void 0;

class Component extends HTMLElement {
  constructor(props) {
    super(props);
    this.attachShadow({
      mode: 'open'
    });
  }

  static define(Component, target, attributes = {}) {
    const tagName = this.getTagName(Component); // Check if the custom element is not defined yet

    if (window.customElements.get(tagName) === undefined) {
      window.customElements.define(tagName, Component);
    }

    if (target !== undefined) {
      const instance = new Component(attributes); // target.appendChild(instance)

      if (target.childNodes.length > 0) {
        target.replaceChild(instance, target.childNodes[0]);
      } else {
        target.appendChild(instance);
      }

      return instance;
    }
  }

  static getTagName(component) {
    return component.name.split(/(?=[A-Z])/g).map(value => {
      return value.charAt(0).toLowerCase() + value.substring(1);
    }).join('-');
  }

}

exports.Component = Component;
},{}],"35e1a80b27bf56c49f1081cf2b74751f":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RouteConfig = void 0;

var _component = require("./component");

var _router = require("./router");

var _errorMessages = require("./error-messages");

class RouteConfig extends _component.Component {
  constructor(props) {
    super(props);
    console.log('RouteConfig');
    this.router = _router.Router.getInstance();
    const path = this.getAttribute('to');
    const component = this.getAttribute('component');

    if (path === '') {
      throw new Error(_errorMessages.getErrorMessage['KJ0001']);
    }

    if (component === '') {
      throw new Error(_errorMessages.getErrorMessage['KJ0002']);
    }
  }

}

exports.RouteConfig = RouteConfig;

_component.Component.define(RouteConfig);
},{"./component":"736c9f382f72d09e2d544126fba347dd","./router":"2ae09f27ae3f184dfcc7e1e0bbc2735d","./error-messages":"a814ef128761799e995d4b057a79117c"}],"2ae09f27ae3f184dfcc7e1e0bbc2735d":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Router = void 0;

var _component = require("./component");

let instance;

class Router {
  constructor() {
    this.config = {
      routes: []
    };
    this.routerOutlet = document.querySelector('router-outlet');

    if (!this.routerOutlet) {
      throw new Error('Missing Router Outlet');
    } // Store the initial content so we can revisit it later


    history.replaceState({
      url: document.location.pathname
    }, document.title, document.location.href); // Revert to a previously saved state

    window.addEventListener('popstate', event => {
      console.log('popstate fired!');
      this.run(event.state.url);
    });
  }
  /**
   *
   * @param {array} routes
   */


  addRoutes(routes) {
    this.config.routes = [...this.config.routes, ...routes.map(route => {
      const params = route.path.matchAll(/:(\w*)/g).map(param => param[1]);
      route.path = new RegExp(`^${route.path.replace(/\//g, '\\/').replace(/:(\w*)/g, '(\\w*)')}$`);
      route.params = params;
      return route;
    })];
    return this;
  }

  navigate(url, title = '', data = {}) {
    data.url = url;
    history.pushState(data, title, document.location.origin + url);
    this.run(url);
  }

  run(url) {
    url = url || document.location.pathname;
    const {
      component,
      params
    } = this.getRoutes(url);

    if (component !== undefined) {
      _component.Component.define(component, this.routerOutlet, params);
    }
  }
  /**
   *
   * @param {object} config
   */


  static getInstance() {
    if (instance === undefined) {
      instance = new Router();
    }

    return instance;
  }

  getRoutes(path) {
    for (const route of this.config.routes) {
      let match = path.match(route.path);

      if (match !== null) {
        match = match.slice(1);
        return {
          component: route.component,
          params: match.reduce((params, value, index) => {
            params[route.params[index]] = value;
            return params;
          }, {})
        };
      }
    }

    return {};
  }

}

exports.Router = Router;
},{"./component":"736c9f382f72d09e2d544126fba347dd"}],"a814ef128761799e995d4b057a79117c":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getErrorMessage = void 0;
const ERROR_MESSAGES = {
  KJ0001: 'Router Config path is missing',
  KJ0002: 'Router Config component is missing'
};

const getErrorMessage = error => {
  return ERROR_MESSAGES[error];
};

exports.getErrorMessage = getErrorMessage;
},{}]},{},["21e4878fbad7078fe681d3cbaefd1bed","11f87267de35446dad2d4907d44f42d5"], null)

//# sourceMappingURL=main.HASH_REF_1b5921f9a3ad678d3bc1cc2b0c688cd8.js.map
